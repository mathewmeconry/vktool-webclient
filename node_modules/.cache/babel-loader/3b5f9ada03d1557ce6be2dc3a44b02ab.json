{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _debounce = require('lodash/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('../utils/');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DEFAULT_DELAY_MS = 200;\n/**\n * HoC that encapsulates common behavior and functionality for doing\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Query caching (optional)\n *  - Search prompt and empty results behaviors\n */\n\nvar asyncContainer = function asyncContainer(Typeahead) {\n  var WrappedTypeahead = function (_React$Component) {\n    _inherits(WrappedTypeahead, _React$Component);\n\n    function WrappedTypeahead() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, WrappedTypeahead);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WrappedTypeahead.__proto__ || Object.getPrototypeOf(WrappedTypeahead)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        query: ''\n      }, _this._getEmptyLabel = function () {\n        var _this$props = _this.props,\n            emptyLabel = _this$props.emptyLabel,\n            isLoading = _this$props.isLoading,\n            promptText = _this$props.promptText,\n            searchText = _this$props.searchText,\n            useCache = _this$props.useCache;\n        var query = _this.state.query;\n\n        if (!query.length) {\n          return promptText;\n        }\n\n        if (isLoading || useCache && !_this._cache[query]) {\n          return searchText;\n        }\n\n        return emptyLabel;\n      }, _this._handleInputChange = function (query, e) {\n        _this.props.onInputChange && _this.props.onInputChange(query, e);\n\n        _this._handleSearchDebounced(query);\n      }, _this._handleSearch = function (query) {\n        var _this$props2 = _this.props,\n            minLength = _this$props2.minLength,\n            onSearch = _this$props2.onSearch,\n            useCache = _this$props2.useCache;\n\n        _this.setState({\n          query: query\n        });\n\n        if (!query || minLength && query.length < minLength) {\n          return;\n        } // Use cached results, if available.\n\n\n        if (useCache && _this._cache[query]) {\n          return;\n        } // Perform the search.\n\n\n        onSearch(query);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(WrappedTypeahead, [{\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        this._cache = {};\n        this._handleSearchDebounced = (0, _debounce2.default)(this._handleSearch, this.props.delay);\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        var options = nextProps.options,\n            useCache = nextProps.useCache;\n\n        if (!this.props.isLoading) {\n          return;\n        }\n\n        if (useCache) {\n          this._cache[this.state.query] = options;\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this._cache = {};\n\n        this._handleSearchDebounced.cancel();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _props = this.props,\n            options = _props.options,\n            useCache = _props.useCache,\n            props = _objectWithoutProperties(_props, ['options', 'useCache']);\n\n        var cachedQuery = this._cache[this.state.query];\n\n        var emptyLabel = this._getEmptyLabel(); // Short-circuit the creation of custom selections while the user is in\n        // the process of searching. The logic for whether or not to display the\n        // custom menu option is basically the same as whether we display the\n        // empty label, so use that as a proxy.\n\n\n        var allowNew = props.allowNew && emptyLabel === props.emptyLabel; // Unless allowNew is a function,\n        // in which case it is up to the function to decide\n\n        if (typeof props.allowNew === 'function') {\n          allowNew = props.allowNew;\n        }\n\n        return _react2.default.createElement(Typeahead, _extends({}, props, {\n          allowNew: allowNew,\n          emptyLabel: emptyLabel,\n          onInputChange: this._handleInputChange,\n          options: useCache && cachedQuery ? cachedQuery : options,\n          ref: function ref(instance) {\n            return _this2._instance = instance;\n          }\n        }));\n      }\n      /**\n       * Make the component instance available.\n       */\n\n    }, {\n      key: 'getInstance',\n      value: function getInstance() {\n        return this._instance.getInstance();\n      }\n    }]);\n\n    return WrappedTypeahead;\n  }(_react2.default.Component);\n\n  WrappedTypeahead.displayName = 'AsyncContainer(' + (0, _utils.getDisplayName)(Typeahead) + ')';\n  WrappedTypeahead.propTypes = {\n    /**\n     * Delay, in milliseconds, before performing search.\n     */\n    delay: _propTypes2.default.number,\n\n    /**\n     * Whether or not a request is currently pending. Necessary for the\n     * container to know when new results are available.\n     */\n    isLoading: _propTypes2.default.bool.isRequired,\n\n    /**\n     * Callback to perform when the search is executed.\n     */\n    onSearch: _propTypes2.default.func.isRequired,\n\n    /**\n     * Options to be passed to the typeahead. Will typically be the query\n     * results, but can also be initial default options.\n     */\n    options: _propTypes2.default.array,\n\n    /**\n     * Message displayed in the menu when there is no user input.\n     */\n    promptText: _propTypes2.default.node,\n\n    /**\n     * Message displayed in the menu while the request is pending.\n     */\n    searchText: _propTypes2.default.node,\n\n    /**\n     * Whether or not the component should cache query results.\n     */\n    useCache: _propTypes2.default.bool\n  };\n  WrappedTypeahead.defaultProps = {\n    delay: DEFAULT_DELAY_MS,\n    minLength: 2,\n    options: [],\n    promptText: 'Type to search...',\n    searchText: 'Searching...',\n    useCache: true\n  };\n  return WrappedTypeahead;\n};\n\nexports.default = asyncContainer;","map":null,"metadata":{},"sourceType":"script"}