{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _flowRight = require('lodash/flowRight');\n\nvar _flowRight2 = _interopRequireDefault(_flowRight);\n\nvar _head = require('lodash/head');\n\nvar _head2 = _interopRequireDefault(_head);\n\nvar _isEqual = require('lodash/isEqual');\n\nvar _isEqual2 = _interopRequireDefault(_isEqual);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _uniqueId = require('lodash/uniqueId');\n\nvar _uniqueId2 = _interopRequireDefault(_uniqueId);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactOnclickoutside = require('react-onclickoutside');\n\nvar _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _highlightOnlyResultContainer = require('./highlightOnlyResultContainer');\n\nvar _highlightOnlyResultContainer2 = _interopRequireDefault(_highlightOnlyResultContainer);\n\nvar _propTypes3 = require('../propTypes/');\n\nvar _utils = require('../utils/');\n\nvar _defaultLabelKey = require('../constants/defaultLabelKey');\n\nvar _keyCode = require('../constants/keyCode');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction genId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return prefix + Math.random().toString(36).substr(2, 12);\n}\n\nfunction getInitialState(props) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      maxResults = props.maxResults,\n      multiple = props.multiple;\n  var selected = props.selected ? props.selected.slice() : defaultSelected.slice();\n  var text = defaultInputValue;\n\n  if (!multiple && selected.length) {\n    // Set the text if an initial selection is passed in.\n    text = (0, _utils.getOptionLabel)((0, _head2.default)(selected), props.labelKey);\n\n    if (selected.length > 1) {\n      // Limit to 1 selection in single-select mode.\n      selected = selected.slice(0, 1);\n    }\n  }\n\n  return {\n    activeIndex: -1,\n    activeItem: null,\n    initialItem: null,\n    selected: selected,\n    showMenu: false,\n    shownResults: maxResults,\n    text: text\n  };\n}\n\nfunction typeaheadContainer(Typeahead) {\n  // Nested HOCs to encapsulate behaviors. In order from outer to inner.\n  Typeahead = (0, _flowRight2.default)(_highlightOnlyResultContainer2.default)(Typeahead);\n\n  var WrappedTypeahead = function (_React$Component) {\n    _inherits(WrappedTypeahead, _React$Component);\n\n    function WrappedTypeahead(props) {\n      _classCallCheck(this, WrappedTypeahead);\n\n      var _this = _possibleConstructorReturn(this, (WrappedTypeahead.__proto__ || Object.getPrototypeOf(WrappedTypeahead)).call(this, props));\n\n      _this.blur = function () {\n        _this.getInput().blur();\n\n        _this._hideMenu();\n      };\n\n      _this.clear = function () {\n        _this.setState(_extends({}, getInitialState(_this.props), {\n          selected: [],\n          text: ''\n        }));\n      };\n\n      _this.focus = function () {\n        _this.getInput().focus();\n      };\n\n      _this.getInput = function () {\n        return _this._input;\n      };\n\n      _this._handleActiveIndexChange = function (activeIndex) {\n        var newState = {\n          activeIndex: activeIndex\n        };\n\n        if (activeIndex === -1) {\n          // Reset the active item if there is no active index.\n          newState.activeItem = null;\n        }\n\n        _this.setState(newState);\n      };\n\n      _this._handleActiveItemChange = function (activeItem) {\n        _this.setState({\n          activeItem: activeItem\n        });\n      };\n\n      _this._handleClear = function () {\n        _this.clear();\n\n        _this._updateSelected([]);\n      };\n\n      _this._handleFocus = function (e) {\n        _this.setState({\n          showMenu: true\n        }, function () {\n          return _this.props.onFocus(e);\n        });\n      };\n\n      _this._handleInitialItemChange = function (initialItem) {\n        var labelKey = _this.props.labelKey;\n        var currentItem = _this.state.initialItem; // Don't update the initial item if it hasn't changed. For custom items,\n        // compare the `labelKey` values since a unique id is generated each time,\n        // causing the comparison to always return false otherwise.\n\n        if ((0, _isEqual2.default)(initialItem, currentItem) || currentItem && initialItem && initialItem.customOption && initialItem[labelKey] === currentItem[labelKey]) {\n          return;\n        }\n\n        _this.setState({\n          initialItem: initialItem\n        });\n      };\n\n      _this._handleInputChange = function (e) {\n        e.persist();\n        var text = e.target.value;\n\n        var _getInitialState = getInitialState(_this.props),\n            activeIndex = _getInitialState.activeIndex,\n            activeItem = _getInitialState.activeItem,\n            shownResults = _getInitialState.shownResults;\n\n        var _this$props = _this.props,\n            multiple = _this$props.multiple,\n            onInputChange = _this$props.onInputChange;\n\n        _this.setState({\n          activeIndex: activeIndex,\n          activeItem: activeItem,\n          showMenu: true,\n          shownResults: shownResults,\n          text: text\n        }, function () {\n          return onInputChange(text, e);\n        }); // Clear any selections if text is entered in single-select mode.\n\n\n        if (_this.state.selected.length && !multiple) {\n          _this._updateSelected([]);\n        }\n      };\n\n      _this._handleKeyDown = function (e, results, isMenuShown) {\n        var activeItem = _this.state.activeItem;\n\n        switch (e.keyCode) {\n          case _keyCode.UP:\n          case _keyCode.DOWN:\n            if (!isMenuShown) {\n              _this._showMenu();\n\n              break;\n            }\n\n            var activeIndex = _this.state.activeIndex; // Prevents input cursor from going to the beginning when pressing up.\n\n            e.preventDefault(); // Increment or decrement index based on user keystroke.\n\n            activeIndex += e.keyCode === _keyCode.UP ? -1 : 1; // Skip over any disabled options.\n\n            while (results[activeIndex] && results[activeIndex].disabled) {\n              activeIndex += e.keyCode === _keyCode.UP ? -1 : 1;\n            } // If we've reached the end, go back to the beginning or vice-versa.\n\n\n            if (activeIndex === results.length) {\n              activeIndex = -1;\n            } else if (activeIndex === -2) {\n              activeIndex = results.length - 1;\n            }\n\n            _this._handleActiveIndexChange(activeIndex);\n\n            break;\n\n          case _keyCode.ESC:\n            isMenuShown && _this._hideMenu();\n            break;\n\n          case _keyCode.RETURN:\n            if (!isMenuShown) {\n              break;\n            } // Prevent form submission while menu is open.\n\n\n            e.preventDefault();\n            activeItem && _this._handleMenuItemSelect(activeItem, e);\n            break;\n\n          case _keyCode.RIGHT:\n          case _keyCode.TAB:\n            if (!isMenuShown) {\n              break;\n            }\n\n            if (activeItem && !activeItem.paginationOption) {\n              // Prevent blurring when selecting the active item.\n              e.keyCode === _keyCode.TAB && e.preventDefault();\n\n              _this._handleSelectionAdd(activeItem);\n\n              break;\n            }\n\n            if (e.keyCode === _keyCode.TAB) {\n              _this._hideMenu();\n            }\n\n            break;\n        }\n\n        _this.props.onKeyDown(e);\n      };\n\n      _this._handleMenuItemSelect = function (option, e) {\n        if (option.paginationOption) {\n          _this._handlePaginate(e);\n        } else {\n          _this._handleSelectionAdd(option);\n        }\n      };\n\n      _this._handlePaginate = function (e) {\n        e.persist();\n        var _this$props2 = _this.props,\n            maxResults = _this$props2.maxResults,\n            onPaginate = _this$props2.onPaginate;\n        var shownResults = _this.state.shownResults + maxResults;\n\n        _this.setState({\n          shownResults: shownResults\n        }, function () {\n          return onPaginate(e, shownResults);\n        });\n      };\n\n      _this._handleSelectionAdd = function (selection) {\n        var _this$props3 = _this.props,\n            multiple = _this$props3.multiple,\n            labelKey = _this$props3.labelKey;\n        var selected = void 0;\n        var text = void 0;\n\n        if (multiple) {\n          // If multiple selections are allowed, add the new selection to the\n          // existing selections.\n          selected = _this.state.selected.concat(selection);\n          text = '';\n        } else {\n          // If only a single selection is allowed, replace the existing selection\n          // with the new one.\n          selected = [selection];\n          text = (0, _utils.getOptionLabel)(selection, labelKey);\n        }\n\n        _this._hideMenu();\n\n        _this.setState({\n          initialItem: selection,\n          text: text\n        }); // Text must be updated before the selection to fix #211.\n        // TODO: Find a more robust way of solving the issue.\n\n\n        _this._updateSelected(selected);\n      };\n\n      _this._handleSelectionRemove = function (selection) {\n        var selected = _this.state.selected.filter(function (option) {\n          return !(0, _isEqual2.default)(option, selection);\n        }); // Make sure the input stays focused after the item is removed.\n\n\n        _this.focus();\n\n        _this._hideMenu();\n\n        _this._updateSelected(selected);\n      };\n\n      _this.handleClickOutside = function (e) {\n        _this.state.showMenu && _this._hideMenu();\n      };\n\n      _this._hideMenu = function () {\n        var _getInitialState2 = getInitialState(_this.props),\n            activeIndex = _getInitialState2.activeIndex,\n            activeItem = _getInitialState2.activeItem,\n            showMenu = _getInitialState2.showMenu,\n            shownResults = _getInitialState2.shownResults;\n\n        _this.setState({\n          activeIndex: activeIndex,\n          activeItem: activeItem,\n          showMenu: showMenu,\n          shownResults: shownResults\n        });\n      };\n\n      _this._showMenu = function () {\n        _this.setState({\n          showMenu: true\n        });\n      };\n\n      _this._updateSelected = function (selected) {\n        _this.setState({\n          selected: selected\n        }, function () {\n          return _this.props.onChange(selected);\n        });\n      };\n\n      _this.state = getInitialState(props);\n      return _this;\n    }\n\n    _createClass(WrappedTypeahead, [{\n      key: 'getChildContext',\n      value: function getChildContext() {\n        return {\n          activeIndex: this.state.activeIndex,\n          onActiveItemChange: this._handleActiveItemChange,\n          onInitialItemChange: this._handleInitialItemChange,\n          onMenuItemClick: this._handleMenuItemSelect\n        };\n      }\n    }, {\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        // Generate random id here since doing it in defaultProps will generate\n        // the same id for every instance.\n        this._menuId = genId('rbt-menu-');\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.props.autoFocus && this.focus();\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        var labelKey = nextProps.labelKey,\n            multiple = nextProps.multiple,\n            selected = nextProps.selected; // If new selections are passed via props, treat as a controlled input.\n\n        if (selected && !(0, _isEqual2.default)(selected, this.state.selected)) {\n          this.setState({\n            selected: selected\n          });\n\n          if (multiple) {\n            return;\n          }\n\n          this.setState({\n            text: selected.length ? (0, _utils.getOptionLabel)((0, _head2.default)(selected), labelKey) : ''\n          });\n        } // Truncate selections when in single-select mode.\n\n\n        var newSelected = selected || this.state.selected;\n\n        if (!multiple && newSelected.length > 1) {\n          newSelected = newSelected.slice(0, 1);\n          this.setState({\n            selected: newSelected,\n            text: (0, _utils.getOptionLabel)((0, _head2.default)(newSelected), labelKey)\n          });\n          return;\n        }\n\n        if (multiple !== this.props.multiple) {\n          this.setState({\n            text: ''\n          });\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var mergedPropsAndState = _extends({}, this.props, this.state);\n\n        var filterBy = mergedPropsAndState.filterBy,\n            labelKey = mergedPropsAndState.labelKey,\n            minLength = mergedPropsAndState.minLength,\n            options = mergedPropsAndState.options,\n            paginate = mergedPropsAndState.paginate,\n            paginationText = mergedPropsAndState.paginationText,\n            shownResults = mergedPropsAndState.shownResults,\n            text = mergedPropsAndState.text;\n        var results = [];\n\n        if (text.length >= minLength) {\n          var cb = Array.isArray(filterBy) ? _utils.defaultFilterBy : filterBy;\n          results = options.filter(function (option) {\n            return cb(option, mergedPropsAndState);\n          });\n        } // This must come before results are truncated.\n\n\n        var shouldPaginate = paginate && results.length > shownResults; // Truncate results if necessary.\n\n        results = (0, _utils.getTruncatedOptions)(results, shownResults); // Add the custom option if necessary.\n\n        if ((0, _utils.addCustomOption)(results, mergedPropsAndState)) {\n          results.push(_defineProperty({\n            customOption: true,\n            id: (0, _uniqueId2.default)('new-id-')\n          }, (0, _utils.getStringLabelKey)(labelKey), text));\n        } // Add the pagination item if necessary.\n\n\n        if (shouldPaginate) {\n          var _results$push2;\n\n          results.push((_results$push2 = {}, _defineProperty(_results$push2, (0, _utils.getStringLabelKey)(labelKey), paginationText), _defineProperty(_results$push2, 'paginationOption', true), _results$push2));\n        } // This must come after checks for the custom option and pagination.\n\n\n        var isMenuShown = (0, _utils.isShown)(results, mergedPropsAndState);\n        return _react2.default.createElement(Typeahead, _extends({}, mergedPropsAndState, {\n          inputRef: function inputRef(input) {\n            return _this2._input = input;\n          },\n          isMenuShown: isMenuShown,\n          menuId: this.props.menuId || this._menuId,\n          onAdd: this._handleSelectionAdd,\n          onChange: this._handleInputChange,\n          onClear: this._handleClear,\n          onFocus: this._handleFocus,\n          onInitialItemChange: this._handleInitialItemChange,\n          onKeyDown: function onKeyDown(e) {\n            return _this2._handleKeyDown(e, results, isMenuShown);\n          },\n          onRemove: this._handleSelectionRemove,\n          results: results\n        }));\n      }\n      /**\n       * From `onClickOutside` HOC.\n       */\n\n    }]);\n\n    return WrappedTypeahead;\n  }(_react2.default.Component);\n\n  WrappedTypeahead.displayName = 'TypeaheadContainer(' + (0, _utils.getDisplayName)(Typeahead) + ')';\n  WrappedTypeahead.propTypes = {\n    /**\n     * For localized accessibility: Should return a string indicating the number\n     * of results for screen readers. Receives the current results.\n     */\n    a11yNumResults: _propTypes2.default.func,\n\n    /**\n     * For localized accessibility: Should return a string indicating the number\n     * of selections for screen readers. Receives the current selections.\n     */\n    a11yNumSelected: _propTypes2.default.func,\n\n    /**\n     * Specify menu alignment. The default value is `justify`, which makes the\n     * menu as wide as the input and truncates long values. Specifying `left`\n     * or `right` will align the menu to that side and the width will be\n     * determined by the length of menu item values.\n     */\n    align: _propTypes2.default.oneOf(['justify', 'left', 'right']),\n\n    /**\n     * Allows the creation of new selections on the fly. Note that any new items\n     * will be added to the list of selections, but not the list of original\n     * options unless handled as such by `Typeahead`'s parent.\n     *\n     * If a function is specified, it will be used to determine whether a custom\n     * option should be included. The return value should be true or false.\n     */\n    allowNew: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),\n\n    /**\n     * Autofocus the input when the component initially mounts.\n     */\n    autoFocus: _propTypes2.default.bool,\n\n    /**\n     * Whether to render the menu inline or attach to `document.body`.\n     */\n    bodyContainer: _propTypes2.default.bool,\n\n    /**\n     * Whether or not filtering should be case-sensitive.\n     */\n    caseSensitive: (0, _propTypes3.checkPropType)(_propTypes2.default.bool, _propTypes3.caseSensitiveType),\n\n    /**\n     * Displays a button to clear the input when there are selections.\n     */\n    clearButton: _propTypes2.default.bool,\n\n    /**\n     * The initial value displayed in the text input.\n     */\n    defaultInputValue: (0, _propTypes3.checkPropType)(_propTypes2.default.string, _propTypes3.defaultInputValueType),\n\n    /**\n     * Specify any pre-selected options. Use only if you want the component to\n     * be uncontrolled.\n     */\n    defaultSelected: _propTypes3.optionType,\n\n    /**\n     * Whether to disable the component.\n     */\n    disabled: _propTypes2.default.bool,\n\n    /**\n     * Specify whether the menu should appear above the input.\n     */\n    dropup: _propTypes2.default.bool,\n\n    /**\n     * Message to display in the menu if there are no valid results.\n     */\n    emptyLabel: _propTypes2.default.node,\n\n    /**\n     * Either an array of fields in `option` to search, or a custom filtering\n     * callback.\n     */\n    filterBy: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string.isRequired), _propTypes2.default.func]),\n\n    /**\n     * Whether or not to automatically adjust the position of the menu when it\n     * reaches the viewport boundaries.\n     */\n    flip: _propTypes2.default.bool,\n\n    /**\n     * Highlights the menu item if there is only one result and allows selecting\n     * that item by hitting enter. Does not work with `allowNew`.\n     */\n    highlightOnlyResult: (0, _propTypes3.checkPropType)(_propTypes2.default.bool, _propTypes3.highlightOnlyResultType),\n\n    /**\n     * Whether the filter should ignore accents and other diacritical marks.\n     */\n    ignoreDiacritics: (0, _propTypes3.checkPropType)(_propTypes2.default.bool, _propTypes3.ignoreDiacriticsType),\n\n    /**\n     * Props to be applied directly to the input. `onBlur`, `onChange`,\n     * `onFocus`, and `onKeyDown` are ignored.\n     */\n    inputProps: (0, _propTypes3.checkPropType)(_propTypes2.default.object, _propTypes3.inputPropsType),\n\n    /**\n     * Bootstrap 4 only. Adds the `is-invalid` classname to the `form-control`.\n     */\n    isInvalid: _propTypes2.default.bool,\n\n    /**\n     * Indicate whether an asynchronous data fetch is happening.\n     */\n    isLoading: _propTypes2.default.bool,\n\n    /**\n     * Bootstrap 4 only. Adds the `is-valid` classname to the `form-control`.\n     */\n    isValid: _propTypes2.default.bool,\n\n    /**\n     * Specify the option key to use for display or a function returning the\n     * display string. By default, the selector will use the `label` key.\n     */\n    labelKey: (0, _propTypes3.checkPropType)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]), _propTypes3.labelKeyType),\n\n    /**\n     * Maximum number of results to display by default. Mostly done for\n     * performance reasons so as not to render too many DOM nodes in the case of\n     * large data sets.\n     */\n    maxResults: _propTypes2.default.number,\n\n    /**\n     * Id applied to the top-level menu element. Required for accessibility.\n     */\n    menuId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n\n    /**\n     * Number of input characters that must be entered before showing results.\n     */\n    minLength: _propTypes2.default.number,\n\n    /**\n     * Whether or not multiple selections are allowed.\n     */\n    multiple: _propTypes2.default.bool,\n\n    /**\n     * Invoked when the input is blurred. Receives an event.\n     */\n    onBlur: _propTypes2.default.func,\n\n    /**\n     * Invoked whenever items are added or removed. Receives an array of the\n     * selected options.\n     */\n    onChange: _propTypes2.default.func,\n\n    /**\n     * Invoked when the input is focused. Receives an event.\n     */\n    onFocus: _propTypes2.default.func,\n\n    /**\n     * Invoked when the input value changes. Receives the string value of the\n     * input.\n     */\n    onInputChange: _propTypes2.default.func,\n\n    /**\n     * Invoked when a key is pressed. Receives an event.\n     */\n    onKeyDown: _propTypes2.default.func,\n\n    /**\n     * Invoked when the menu is hidden.\n     */\n    onMenuHide: _propTypes2.default.func,\n\n    /**\n     * Invoked when the menu is shown.\n     */\n    onMenuShow: _propTypes2.default.func,\n\n    /**\n     * Invoked when the pagination menu item is clicked. Receives an event.\n     */\n    onPaginate: _propTypes2.default.func,\n\n    /**\n     * Full set of options, including pre-selected options. Must either be an\n     * array of objects (recommended) or strings.\n     */\n    options: _propTypes3.optionType.isRequired,\n\n    /**\n     * Give user the ability to display additional results if the number of\n     * results exceeds `maxResults`.\n     */\n    paginate: _propTypes2.default.bool,\n\n    /**\n     * Prompt displayed when large data sets are paginated.\n     */\n    paginationText: _propTypes2.default.string,\n\n    /**\n     * Placeholder text for the input.\n     */\n    placeholder: _propTypes2.default.string,\n\n    /**\n     * Callback for custom menu rendering.\n     */\n    renderMenu: _propTypes2.default.func,\n\n    /**\n     * The selected option(s) displayed in the input. Use this prop if you want\n     * to control the component via its parent.\n     */\n    selected: _propTypes3.optionType,\n\n    /**\n     * Allows selecting the hinted result by pressing enter.\n     */\n    selectHintOnEnter: _propTypes2.default.bool\n  };\n  WrappedTypeahead.defaultProps = {\n    a11yNumResults: function a11yNumResults(results) {\n      var resultString = (0, _utils.pluralize)('result', results.length);\n      return resultString + '. Use up and down arrow keys to navigate.';\n    },\n    a11yNumSelected: function a11yNumSelected(selected) {\n      return (0, _utils.pluralize)('selection', selected.length);\n    },\n    align: 'justify',\n    allowNew: false,\n    autoFocus: false,\n    bodyContainer: false,\n    caseSensitive: false,\n    clearButton: false,\n    defaultInputValue: '',\n    defaultSelected: [],\n    disabled: false,\n    dropup: false,\n    emptyLabel: 'No matches found.',\n    filterBy: [],\n    flip: false,\n    highlightOnlyResult: false,\n    ignoreDiacritics: true,\n    inputProps: {},\n    isInvalid: false,\n    isLoading: false,\n    isValid: false,\n    labelKey: _defaultLabelKey.DEFAULT_LABELKEY,\n    maxResults: 100,\n    minLength: 0,\n    multiple: false,\n    onBlur: _noop2.default,\n    onChange: _noop2.default,\n    onFocus: _noop2.default,\n    onInputChange: _noop2.default,\n    onKeyDown: _noop2.default,\n    onMenuHide: _noop2.default,\n    onMenuShow: _noop2.default,\n    onPaginate: _noop2.default,\n    paginate: true,\n    paginationText: 'Display additional results...',\n    placeholder: '',\n    selectHintOnEnter: false\n  };\n  WrappedTypeahead.childContextTypes = {\n    activeIndex: _propTypes2.default.number.isRequired,\n    onActiveItemChange: _propTypes2.default.func.isRequired,\n    onInitialItemChange: _propTypes2.default.func.isRequired,\n    onMenuItemClick: _propTypes2.default.func.isRequired\n  };\n  return (0, _reactOnclickoutside2.default)(WrappedTypeahead);\n}\n\nexports.default = typeaheadContainer;","map":null,"metadata":{},"sourceType":"script"}