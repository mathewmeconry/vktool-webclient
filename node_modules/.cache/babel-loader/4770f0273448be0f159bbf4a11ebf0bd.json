{"ast":null,"code":"import { DataActions } from \"./../actions/DataActions\";\nimport { combineReducers } from \"redux\";\nimport { UIActions } from \"../actions/UIActions\";\n\nfunction User() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    data: undefined\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DataActions.FETCH_USER:\n      return Object.assign({}, state, {\n        loading: true\n      });\n\n    case DataActions.GOT_USER:\n      if (Object.keys(action.payload).length > 0) {\n        return {\n          loading: false,\n          data: action.payload\n        };\n      } else {\n        return {\n          loading: false,\n          data: undefined\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction Users() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['displayName'],\n      direction: 'asc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n  var searchFields = ['displayName'];\n\n  switch (action.type) {\n    case DataActions.FETCH_USERS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_USERS:\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = action.payload[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var contact = _step.value;\n          byId[contact._id] = contact;\n          ids.push(contact._id);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      action.payload = '';\n      ids = search(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), searchFields, action);\n      ids = sort(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), action);\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    case UIActions.SEARCH_USERS:\n      return Object.assign({}, state, {\n        ids: search(state, searchFields, action),\n        filter: action.payload\n      });\n\n    case UIActions.SORT_USERS:\n      return Object.assign({}, state, {\n        ids: sort(state, action),\n        sort: {\n          keys: action.payload.keys,\n          direction: action.payload.direction\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction Ranks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['name'],\n      direction: 'asc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n\n  switch (action.type) {\n    case DataActions.FETCH_RANKS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_RANKS:\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = action.payload[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var rank = _step2.value;\n          byId[rank._id] = rank;\n          ids.push(rank._id);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction Contacts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['firstname'],\n      direction: 'asc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n\n  switch (action.type) {\n    case DataActions.FETCH_CONTACTS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_CONTACTS:\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = action.payload[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var contact = _step3.value;\n          byId[contact._id] = contact;\n          ids.push(contact._id);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction Members() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['firstname'],\n      direction: 'asc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n  var searchFields = ['firstname', 'lastname', 'address', 'postcode', 'city', 'mail', 'mailSecond', 'phoneFixed', 'phoneFixedSecond', 'phoneMobile'];\n\n  switch (action.type) {\n    case DataActions.FETCH_MEMBERS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_MEMBERS:\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = action.payload[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var contact = _step4.value;\n          byId[contact._id] = contact;\n          ids.push(contact._id);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      action.payload = '';\n      ids = search(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), searchFields, action);\n      ids = sort(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), action);\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    case UIActions.SEARCH_MEMBERS:\n      return Object.assign({}, state, {\n        ids: search(state, searchFields, action),\n        filter: action.payload\n      });\n\n    case UIActions.SORT_MEMBERS:\n      return Object.assign({}, state, {\n        ids: sort(state, action),\n        sort: {\n          keys: action.payload.keys,\n          direction: action.payload.direction\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction Orders() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['documentNr'],\n      direction: 'desc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n  var searchFields = ['documentNr', 'title'];\n\n  switch (action.type) {\n    case DataActions.FETCH_ORDERS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_ORDERS:\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = action.payload[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var order = _step5.value;\n          byId[order._id] = order;\n          ids.push(order._id);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      action.payload = '';\n      ids = search(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), searchFields, action);\n      ids = sort(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), action);\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    case UIActions.SEARCH_ORDERS:\n      return Object.assign({}, state, {\n        ids: search(state, searchFields, action),\n        filter: action.payload\n      });\n\n    case UIActions.SORT_ORDERS:\n      return Object.assign({}, state, {\n        ids: sort(state, action),\n        sort: {\n          keys: action.payload.keys,\n          direction: action.payload.direction\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction OpenOrders() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['title'],\n      direction: 'desc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n  var searchFields = ['documentNr', 'title'];\n\n  switch (action.type) {\n    case DataActions.FETCH_OPEN_ORDERS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_OPEN_ORDERS:\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = action.payload[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var order = _step6.value;\n          byId[order._id] = order;\n          ids.push(order._id);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      action.payload = '';\n      ids = search(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), searchFields, action);\n      ids = sort(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), action);\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction BillingReports() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['orderDate'],\n      direction: 'desc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n  var searchFields = {\n    'order': ['documentNr', 'title']\n  };\n\n  switch (action.type) {\n    case DataActions.FETCH_BILLING_REPORTS:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_BILLING_REPORTS:\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = action.payload[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var report = _step7.value;\n          byId[report._id] = report;\n          ids.push(report._id);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      action.payload = '';\n      ids = search(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), searchFields, action);\n      ids = sort(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), action);\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    case UIActions.SEARCH_BILLING_REPORTS:\n      return Object.assign({}, state, {\n        ids: search(state, searchFields, action),\n        filter: action.payload\n      });\n\n    case UIActions.SORT_BILLING_REPORTS:\n      return Object.assign({}, state, {\n        ids: sort(state, action),\n        sort: {\n          keys: action.payload.keys,\n          direction: action.payload.direction\n        }\n      });\n\n    case DataActions.APPROVE_BILLING_REPORT:\n      byId = Object.assign({}, state.byId, Object.assign({}, state.byId[action.payload], {\n        status: 'approved'\n      }));\n      return Object.assign({}, state, {\n        byId: byId\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction CompensationEntries() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    byId: {},\n    ids: [],\n    filter: '',\n    sort: {\n      keys: ['date'],\n      direction: 'desc'\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var byId = {};\n  var ids = [];\n  var searchFields = {\n    'member': ['firstname', 'lastname'],\n    'amount': {},\n    'creator': ['displayName']\n  };\n\n  switch (action.type) {\n    case DataActions.FETCH_COMPENSATION_ENTRIES:\n      if (state.ids.length === 0) {\n        return Object.assign({}, state, {\n          loading: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        loading: false\n      });\n\n    case DataActions.GOT_COMPENSATION_ENTRIES:\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = action.payload[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var entry = _step8.value;\n          byId[entry._id] = entry;\n          ids.push(entry._id);\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      action.payload = '';\n      ids = search(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), searchFields, action);\n      ids = sort(Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      }), action);\n      return Object.assign({}, state, {\n        loading: false,\n        byId: byId,\n        ids: ids\n      });\n\n    case UIActions.SEARCH_COMPENSATION_ENTRIES:\n      return Object.assign({}, state, {\n        ids: search(state, searchFields, action),\n        filter: action.payload\n      });\n\n    case UIActions.SORT_COMPENSATION_ENTRIES:\n      return Object.assign({}, state, {\n        ids: sort(state, action),\n        sort: {\n          keys: action.payload.keys,\n          direction: action.payload.direction\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  user: User,\n  users: Users,\n  contacts: Contacts,\n  members: Members,\n  ranks: Ranks,\n  orders: Orders,\n  openOrders: OpenOrders,\n  billingReports: BillingReports,\n  compensationEntries: CompensationEntries\n});\n\nvar search = function search(state, searchFields, action) {\n  var ids = [];\n  var filter = action.payload || state.filter;\n\n  if (filter) {\n    for (var i in state.byId) {\n      var contact = state.byId[i];\n      var searchString = '';\n\n      for (var _i in searchFields) {\n        //@ts-ignore\n        var field = searchFields[_i];\n\n        if (field instanceof Array) {\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = field[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var f = _step9.value;\n\n              if (f.indexOf('phone') > -1) {\n                //@ts-ignore\n                searchString += contact[_i][f].toString().replace(' ', '') + ' ';\n              } //@ts-ignore\n\n\n              searchString += contact[_i][f].toString() + ' ';\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n        } else {\n          if (field.indexOf('phone') > -1) {\n            //@ts-ignore\n            searchString += contact[field].toString().replace(' ', '') + ' ';\n          } //@ts-ignore\n\n\n          searchString += contact[field].toString() + ' ';\n        }\n      }\n\n      if (searchString.toLowerCase().indexOf(filter.toLowerCase()) > -1) {\n        //@ts-ignore\n        ids.push(contact._id);\n      }\n    }\n  } else {\n    for (var _i2 in state.byId) {\n      ids.push(_i2);\n    }\n  }\n\n  return ids;\n};\n\nvar sort = function sort(state, action) {\n  var sortKeys = action.payload.keys || state.sort.keys;\n  var sortDirection = action.payload.direction || state.sort.direction;\n  var prepared = [];\n  var _iteratorNormalCompletion10 = true;\n  var _didIteratorError10 = false;\n  var _iteratorError10 = undefined;\n\n  try {\n    for (var _iterator10 = state.ids[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n      var _id = _step10.value;\n      var element = state.byId[_id];\n      var sortValues = [];\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = sortKeys[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var i = _step11.value;\n\n          if (i.indexOf('phone') > -1) {\n            //@ts-ignore\n            sortValues.push(element[i].replace(' ', ''));\n          } else {\n            //@ts-ignore\n            sortValues.push(element[i]);\n          }\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      prepared.push({\n        id: _id,\n        value: sortValues.join(' ').toLowerCase()\n      });\n    }\n  } catch (err) {\n    _didIteratorError10 = true;\n    _iteratorError10 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n        _iterator10.return();\n      }\n    } finally {\n      if (_didIteratorError10) {\n        throw _iteratorError10;\n      }\n    }\n  }\n\n  prepared.sort(function (a, b) {\n    var aValue, bValue;\n    aValue = parseFloat(a.value);\n    bValue = parseFloat(b.value);\n\n    if (isNaN(aValue) || isNaN(bValue)) {\n      aValue = a.value;\n      bValue = b.value;\n    }\n\n    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n    return 0;\n  });\n  return prepared.map(function (el) {\n    return el.id;\n  });\n};","map":{"version":3,"sources":["/home/mathias/Documents/privat/VK/vk-tool/src/app/reducers/DataReducer.ts"],"names":["DataActions","combineReducers","UIActions","User","state","loading","data","undefined","action","type","FETCH_USER","Object","assign","GOT_USER","keys","payload","length","Users","byId","ids","filter","sort","direction","searchFields","FETCH_USERS","GOT_USERS","contact","_id","push","search","SEARCH_USERS","SORT_USERS","Ranks","FETCH_RANKS","GOT_RANKS","rank","Contacts","FETCH_CONTACTS","GOT_CONTACTS","Members","FETCH_MEMBERS","GOT_MEMBERS","SEARCH_MEMBERS","SORT_MEMBERS","Orders","FETCH_ORDERS","GOT_ORDERS","order","SEARCH_ORDERS","SORT_ORDERS","OpenOrders","FETCH_OPEN_ORDERS","GOT_OPEN_ORDERS","BillingReports","FETCH_BILLING_REPORTS","GOT_BILLING_REPORTS","report","SEARCH_BILLING_REPORTS","SORT_BILLING_REPORTS","APPROVE_BILLING_REPORT","status","CompensationEntries","FETCH_COMPENSATION_ENTRIES","GOT_COMPENSATION_ENTRIES","entry","SEARCH_COMPENSATION_ENTRIES","SORT_COMPENSATION_ENTRIES","user","users","contacts","members","ranks","orders","openOrders","billingReports","compensationEntries","i","searchString","field","Array","f","indexOf","toString","replace","toLowerCase","sortKeys","sortDirection","prepared","id","element","sortValues","value","join","a","b","aValue","bValue","parseFloat","isNaN","map","el"],"mappings":"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","sourcesContent":["import { DataActions } from \"./../actions/DataActions\";\nimport { AnyAction, combineReducers } from \"redux\";\nimport StringIndexed from \"../interfaces/StringIndexed\";\nimport { UIActions } from \"../actions/UIActions\";\nimport ContactModel from \"../../shared/models/ContactModel\";\nimport ContactGroupModel from \"../../shared/models/ContactGroupModel\";\nimport OrderModel from \"../../shared/models/OrderModel\";\nimport BillingReportModel from \"../../shared/models/BillingReportModel\";\nimport CompensationEntryModel from \"../../shared/models/CompensationEntryModel\";\nimport UserModel from \"../../shared/models/UserModel\";\n\nexport interface Data {\n    user: SingleDataInterface<UserModel>,\n    users: DataInterface<UserModel>\n    contacts: DataInterface<ContactModel>\n    members: DataInterface<ContactModel>\n    ranks: DataInterface<ContactGroupModel>\n    orders: DataInterface<OrderModel>,\n    openOrders: DataInterface<OrderModel>,\n    billingReports: DataInterface<BillingReportModel>,\n    compensationEntries: DataInterface<CompensationEntryModel>\n}\n\nexport interface SingleDataInterface<T> {\n    loading: boolean,\n    data?: T\n}\n\nexport interface DataInterface<T> {\n    loading: boolean,\n    byId: StringIndexed<T>,\n    ids: Array<string>,\n    filter: string,\n    sort: { keys: Array<string>, direction: 'asc' | 'desc' }\n}\n\nfunction User(state: SingleDataInterface<UserModel> = { loading: false, data: undefined }, action: AnyAction): SingleDataInterface<UserModel> {\n    switch (action.type) {\n        case DataActions.FETCH_USER:\n            return Object.assign({}, state, { loading: true })\n        case DataActions.GOT_USER:\n            if (Object.keys(action.payload).length > 0) {\n                return { loading: false, data: action.payload }\n            } else {\n                return { loading: false, data: undefined }\n            }\n        default:\n            return state\n    }\n}\n\nfunction Users(state: DataInterface<UserModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['displayName'], direction: 'asc' } }, action: AnyAction): DataInterface<UserModel> {\n    let byId: StringIndexed<UserModel> = {}\n    let ids: Array<string> = []\n    let searchFields = ['displayName']\n    switch (action.type) {\n        case DataActions.FETCH_USERS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_USERS:\n            for (let contact of action.payload) {\n                byId[contact._id] = contact\n                ids.push(contact._id)\n            }\n\n            action.payload = ''\n            ids = search(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), searchFields, action)\n            ids = sort(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), action)\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        case UIActions.SEARCH_USERS:\n            return Object.assign({}, state, { ids: search(state, searchFields, action), filter: action.payload })\n        case UIActions.SORT_USERS:\n            return Object.assign({}, state, { ids: sort(state, action), sort: { keys: action.payload.keys, direction: action.payload.direction } })\n        default:\n            return state\n    }\n}\n\nfunction Ranks(state: DataInterface<ContactGroupModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['name'], direction: 'asc' } }, action: AnyAction): DataInterface<ContactGroupModel> {\n    let byId: StringIndexed<ContactGroupModel> = {}\n    let ids = []\n    switch (action.type) {\n        case DataActions.FETCH_RANKS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_RANKS:\n            for (let rank of action.payload) {\n                byId[rank._id] = rank\n                ids.push(rank._id)\n            }\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        default:\n            return state\n    }\n}\n\nfunction Contacts(state: DataInterface<ContactModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['firstname'], direction: 'asc' } }, action: AnyAction): DataInterface<ContactModel> {\n    let byId: StringIndexed<ContactModel> = {}\n    let ids = []\n    switch (action.type) {\n        case DataActions.FETCH_CONTACTS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_CONTACTS:\n            for (let contact of action.payload) {\n                byId[contact._id] = contact\n                ids.push(contact._id)\n            }\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        default:\n            return state\n    }\n}\n\nfunction Members(state: DataInterface<ContactModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['firstname'], direction: 'asc' } }, action: AnyAction): DataInterface<ContactModel> {\n    let byId: StringIndexed<ContactModel> = {}\n    let ids: Array<string> = []\n    let searchFields = ['firstname', 'lastname', 'address', 'postcode', 'city', 'mail', 'mailSecond', 'phoneFixed', 'phoneFixedSecond', 'phoneMobile']\n    switch (action.type) {\n        case DataActions.FETCH_MEMBERS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_MEMBERS:\n            for (let contact of action.payload) {\n                byId[contact._id] = contact\n                ids.push(contact._id)\n            }\n\n            action.payload = ''\n            ids = search(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), searchFields, action)\n            ids = sort(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), action)\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        case UIActions.SEARCH_MEMBERS:\n            return Object.assign({}, state, { ids: search(state, searchFields, action), filter: action.payload })\n        case UIActions.SORT_MEMBERS:\n            return Object.assign({}, state, { ids: sort(state, action), sort: { keys: action.payload.keys, direction: action.payload.direction } })\n        default:\n            return state\n    }\n}\n\nfunction Orders(state: DataInterface<OrderModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['documentNr'], direction: 'desc' } }, action: AnyAction): DataInterface<OrderModel> {\n    let byId: StringIndexed<OrderModel> = {}\n    let ids: Array<string> = []\n    let searchFields = ['documentNr', 'title']\n    switch (action.type) {\n        case DataActions.FETCH_ORDERS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_ORDERS:\n            for (let order of action.payload) {\n                byId[order._id] = order\n                ids.push(order._id)\n            }\n\n            action.payload = ''\n            ids = search(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), searchFields, action)\n            ids = sort(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), action)\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        case UIActions.SEARCH_ORDERS:\n            return Object.assign({}, state, { ids: search(state, searchFields, action), filter: action.payload })\n        case UIActions.SORT_ORDERS:\n            return Object.assign({}, state, { ids: sort(state, action), sort: { keys: action.payload.keys, direction: action.payload.direction } })\n        default:\n            return state\n    }\n}\n\nfunction OpenOrders(state: DataInterface<OrderModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['title'], direction: 'desc' } }, action: AnyAction): DataInterface<OrderModel> {\n    let byId: StringIndexed<OrderModel> = {}\n    let ids: Array<string> = []\n    let searchFields = ['documentNr', 'title']\n    switch (action.type) {\n        case DataActions.FETCH_OPEN_ORDERS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_OPEN_ORDERS:\n            for (let order of action.payload) {\n                byId[order._id] = order\n                ids.push(order._id)\n            }\n\n            action.payload = ''\n            ids = search(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), searchFields, action)\n            ids = sort(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), action)\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        default:\n            return state\n    }\n}\n\n\nfunction BillingReports(state: DataInterface<BillingReportModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['orderDate'], direction: 'desc' } }, action: AnyAction): DataInterface<BillingReportModel> {\n    let byId: StringIndexed<BillingReportModel> = {}\n    let ids: Array<string> = []\n    let searchFields = { 'order': ['documentNr', 'title'] }\n    switch (action.type) {\n        case DataActions.FETCH_BILLING_REPORTS:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_BILLING_REPORTS:\n            for (let report of action.payload) {\n                byId[report._id] = report\n                ids.push(report._id)\n            }\n\n            action.payload = ''\n            ids = search(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), searchFields, action)\n            ids = sort(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), action)\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        case UIActions.SEARCH_BILLING_REPORTS:\n            return Object.assign({}, state, { ids: search(state, searchFields, action), filter: action.payload })\n        case UIActions.SORT_BILLING_REPORTS:\n            return Object.assign({}, state, { ids: sort(state, action), sort: { keys: action.payload.keys, direction: action.payload.direction } })\n        case DataActions.APPROVE_BILLING_REPORT:\n            byId = Object.assign({}, state.byId, Object.assign({}, state.byId[action.payload], { status: 'approved' }))\n            return Object.assign({}, state, { byId: byId })\n        default:\n            return state\n    }\n}\n\nfunction CompensationEntries(state: DataInterface<CompensationEntryModel> = { loading: false, byId: {}, ids: [], filter: '', sort: { keys: ['date'], direction: 'desc' } }, action: AnyAction): DataInterface<CompensationEntryModel> {\n    let byId: StringIndexed<CompensationEntryModel> = {}\n    let ids: Array<string> = []\n    let searchFields = { 'member': ['firstname', 'lastname'], 'amount': {}, 'creator': ['displayName'] }\n    switch (action.type) {\n        case DataActions.FETCH_COMPENSATION_ENTRIES:\n            if (state.ids.length === 0) {\n                return Object.assign({}, state, { loading: true })\n            }\n            return Object.assign({}, state, { loading: false })\n        case DataActions.GOT_COMPENSATION_ENTRIES:\n            for (let entry of action.payload) {\n                byId[entry._id] = entry\n                ids.push(entry._id)\n            }\n\n            action.payload = ''\n            ids = search(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), searchFields, action)\n            ids = sort(Object.assign({}, state, { loading: false, byId: byId, ids: ids }), action)\n            return Object.assign({}, state, { loading: false, byId: byId, ids: ids })\n        case UIActions.SEARCH_COMPENSATION_ENTRIES:\n            return Object.assign({}, state, { ids: search(state, searchFields, action), filter: action.payload })\n        case UIActions.SORT_COMPENSATION_ENTRIES:\n            return Object.assign({}, state, { ids: sort(state, action), sort: { keys: action.payload.keys, direction: action.payload.direction } })\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({ user: User, users: Users, contacts: Contacts, members: Members, ranks: Ranks, orders: Orders, openOrders: OpenOrders, billingReports: BillingReports, compensationEntries: CompensationEntries })\n\n\n\nconst search = function <T>(state: DataInterface<T>, searchFields: Array<string> | { [index: string]: any }, action: AnyAction): Array<string> {\n    let ids: Array<string> = []\n    let filter = action.payload || state.filter\n    if (filter) {\n        for (let i in state.byId) {\n            let contact = state.byId[i]\n            let searchString = ''\n            for (let i in searchFields) {\n                //@ts-ignore\n                let field = searchFields[i]\n                if (field instanceof Array) {\n                    for (let f of field) {\n                        if (f.indexOf('phone') > -1) {\n                            //@ts-ignore\n                            searchString += contact[i][f].toString().replace(' ', '') + ' '\n                        }\n                        //@ts-ignore\n                        searchString += contact[i][f].toString() + ' '\n                    }\n                } else {\n                    if (field.indexOf('phone') > -1) {\n                        //@ts-ignore\n                        searchString += contact[field].toString().replace(' ', '') + ' '\n                    }\n                    //@ts-ignore\n                    searchString += contact[field].toString() + ' '\n                }\n            }\n\n            if (searchString.toLowerCase().indexOf(filter.toLowerCase()) > -1) {\n                //@ts-ignore\n                ids.push(contact._id)\n            }\n        }\n    } else {\n        for (let i in state.byId) {\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nconst sort = function <T>(state: DataInterface<T>, action: AnyAction): Array<string> {\n    let sortKeys = action.payload.keys || state.sort.keys\n    let sortDirection = action.payload.direction || state.sort.direction\n    let prepared: Array<{ id: string, value: string }> = []\n\n    for (let id of state.ids) {\n        let element = state.byId[id]\n        let sortValues = []\n        for (let i of sortKeys) {\n            if (i.indexOf('phone') > -1) {\n                //@ts-ignore\n                sortValues.push(element[i].replace(' ', ''))\n            } else {\n                //@ts-ignore\n                sortValues.push(element[i])\n            }\n        }\n        prepared.push({ id: id, value: sortValues.join(' ').toLowerCase() })\n    }\n\n    prepared.sort((a, b) => {\n        let aValue, bValue\n        aValue = parseFloat(a.value)\n        bValue = parseFloat(b.value)\n        if (isNaN(aValue) || isNaN(bValue)) {\n            aValue = a.value\n            bValue = b.value\n        }\n\n        if (aValue < bValue)\n            return (sortDirection === 'asc') ? -1 : 1;\n        if (aValue > bValue)\n            return (sortDirection === 'asc') ? 1 : -1;\n        return 0;\n    })\n\n    return prepared.map(el => el.id)\n}"]},"metadata":{},"sourceType":"module"}