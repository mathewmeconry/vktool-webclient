{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _head = require('lodash/head');\n\nvar _head2 = _interopRequireDefault(_head);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _keyCode = require('../constants/keyCode');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction highlightOnlyResultContainer(Typeahead) {\n  var WrappedTypeahead = function (_React$Component) {\n    _inherits(WrappedTypeahead, _React$Component);\n\n    function WrappedTypeahead() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, WrappedTypeahead);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WrappedTypeahead.__proto__ || Object.getPrototypeOf(WrappedTypeahead)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        isOnlyResult: false\n      }, _this._handleKeyDown = function (e) {\n        var _this$props = _this.props,\n            initialItem = _this$props.initialItem,\n            onKeyDown = _this$props.onKeyDown,\n            onAdd = _this$props.onAdd;\n\n        switch (e.keyCode) {\n          case _keyCode.RETURN:\n            if (_this.state.isOnlyResult) {\n              onAdd(initialItem);\n            }\n\n            break;\n        }\n\n        onKeyDown(e);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(WrappedTypeahead, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        var allowNew = nextProps.allowNew,\n            highlightOnlyResult = nextProps.highlightOnlyResult,\n            results = nextProps.results;\n\n        if (!highlightOnlyResult || allowNew) {\n          return;\n        }\n\n        if (results.length !== this.props.results.length) {\n          this.setState({\n            isOnlyResult: results.length === 1 && !(0, _head2.default)(results).disabled\n          });\n        }\n      }\n    }, {\n      key: 'getChildContext',\n      value: function getChildContext() {\n        return {\n          isOnlyResult: this.state.isOnlyResult\n        };\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(Typeahead, _extends({}, this.props, {\n          onKeyDown: this._handleKeyDown\n        }));\n      }\n    }]);\n\n    return WrappedTypeahead;\n  }(_react2.default.Component);\n\n  WrappedTypeahead.childContextTypes = {\n    isOnlyResult: _propTypes2.default.bool.isRequired\n  };\n  return WrappedTypeahead;\n}\n\nexports.default = highlightOnlyResultContainer;","map":null,"metadata":{},"sourceType":"script"}