{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Stripped-down version of https://github.com/helior/react-highlighter\n *\n * Results are already filtered by the time the component is used internally so\n * we can safely ignore case and diacritical marks for the purposes of matching.\n */\n\n\nvar Highlighter = function (_React$PureComponent) {\n  _inherits(Highlighter, _React$PureComponent);\n\n  function Highlighter() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Highlighter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Highlighter.__proto__ || Object.getPrototypeOf(Highlighter)).call.apply(_ref, [this].concat(args))), _this), _this._count = 0, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Highlighter, [{\n    key: 'render',\n    value: function render() {\n      var children = this.props.search ? this._renderHighlightedChildren() : this.props.children;\n      return _react2.default.createElement('span', null, children);\n    }\n  }, {\n    key: '_renderHighlightedChildren',\n    value: function _renderHighlightedChildren() {\n      var children = [];\n      var remaining = this.props.children;\n\n      while (remaining) {\n        var bounds = (0, _utils.getMatchBounds)(remaining, this.props.search);\n\n        if (!bounds) {\n          this._count++;\n          children.push(_react2.default.createElement('span', {\n            key: this._count\n          }, remaining));\n          return children;\n        } // Capture the string that leads up to a match...\n\n\n        var nonMatch = remaining.slice(0, bounds.start);\n\n        if (nonMatch) {\n          this._count++;\n          children.push(_react2.default.createElement('span', {\n            key: this._count\n          }, nonMatch));\n        } // Now, capture the matching string...\n\n\n        var match = remaining.slice(bounds.start, bounds.end);\n\n        if (match) {\n          this._count++;\n          children.push(_react2.default.createElement('mark', {\n            className: 'rbt-highlight-text',\n            key: this._count\n          }, match));\n        } // And if there's anything left over, continue the loop.\n\n\n        remaining = remaining.slice(bounds.end);\n      }\n\n      return children;\n    }\n  }]);\n\n  return Highlighter;\n}(_react2.default.PureComponent);\n\nHighlighter.propTypes = {\n  children: _propTypes2.default.string.isRequired,\n  search: _propTypes2.default.string.isRequired\n};\nexports.default = Highlighter;","map":null,"metadata":{},"sourceType":"script"}