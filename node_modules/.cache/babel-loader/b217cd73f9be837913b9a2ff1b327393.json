{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _getStringLabelKey = require('./getStringLabelKey');\n\nvar _getStringLabelKey2 = _interopRequireDefault(_getStringLabelKey);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\n\n\nfunction getOptionLabel(option, labelKey) {\n  if (option.paginationOption || option.customOption) {\n    return option[(0, _getStringLabelKey2.default)(labelKey)];\n  }\n\n  var optionLabel = void 0;\n\n  if (typeof option === 'string') {\n    optionLabel = option;\n  }\n\n  if (typeof labelKey === 'function') {\n    // This overwrites string options, but we assume the consumer wants to do\n    // something custom if `labelKey` is a function.\n    optionLabel = labelKey(option);\n  } else if (typeof labelKey === 'string' && (0, _isPlainObject2.default)(option)) {\n    optionLabel = option[labelKey];\n  }\n\n  !(typeof optionLabel === 'string') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : (0, _invariant2.default)(false) : void 0;\n  return optionLabel;\n}\n\nexports.default = getOptionLabel;","map":null,"metadata":{},"sourceType":"script"}